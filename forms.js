// forms.js ‚Äî ◊î◊ï◊°◊§◊™ ◊î◊õ◊†◊°◊ï◊™/◊î◊ï◊¶◊ê◊ï◊™ + ◊ë◊ó◊ô◊®◊™ ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ (modal)

// --- ◊¢◊ñ◊®: ◊û◊ó◊õ◊î ◊ú-sb ◊ê◊ù ◊¢◊ì◊ô◊ô◊ü ◊ú◊ê ◊ß◊ô◊ô◊ù ---
function waitForSb() {
  return new Promise((resolve) => {
    if (window.sb) return resolve(window.sb);
    const onReady = () => { window.removeEventListener("sb-ready", onReady); resolve(window.sb); };
    window.addEventListener("sb-ready", onReady);
  });
}

// --- ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊ë◊®◊ô◊®◊™÷æ◊û◊ó◊ì◊ú (◊î◊ï◊¶◊ê◊î) ◊õ◊ï◊ú◊ú ◊î◊™◊ï◊°◊§◊ï◊™ ◊©◊ë◊ô◊ß◊©◊™ ---
const DEFAULT_EXPENSE_CATS = [
  { name: "◊ì◊ú◊ß", emoji: "‚õΩÔ∏è" }, { name: "◊®◊õ◊ë", emoji: "üöó" }, { name: "◊ë◊ô◊™", emoji: "üè†" }, { name: "◊°◊ï◊§◊®", emoji: "üõí" },
  { name: "◊ó◊©◊û◊ú", emoji: "üí°" }, { name: "◊ë◊™◊ô ◊°◊§◊®", emoji: "üè´" }, { name: "◊ó◊ï◊í◊ô◊ù", emoji: "üéµ" }, { name: "◊©◊ò◊ï◊ô◊ï◊™", emoji: "üéÅ" },
  { name: "◊û◊°◊¢◊ì◊ï◊™", emoji: "üçî" }, { name: "◊ë◊í◊ì◊ô◊ù", emoji: "üëï" }, { name: "◊©◊ï◊†◊ï◊™", emoji: "‚ú®" }, { name: "◊û◊ñ◊ï◊û◊ü/◊õ◊°◊§◊ï◊û◊ò", emoji: "üèß" },
  { name: "◊ë◊ô◊ò◊ï◊ó", emoji: "üõ°Ô∏è" }, { name: "◊ó◊ô◊ï◊™", emoji: "üê∂" }, { name: "◊™◊®◊ë◊ï◊™", emoji: "üé≠" },
  // ◊™◊ï◊°◊§◊ï◊™:
  { name: "◊†◊ï◊§◊©", emoji: "üèñÔ∏è" }, { name: "◊ë◊®◊ô◊ê◊ï◊™", emoji: "ü©∫" }, { name: "◊™◊ó◊ë◊ï◊®◊î ◊¶◊ô◊ë◊ï◊®◊ô◊™", emoji: "üöå" }
];

// (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô) ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊î◊õ◊†◊°◊î ◊ë◊°◊ô◊°◊ô◊ï◊™
const DEFAULT_INCOME_CATS = [
  { name: "◊û◊©◊õ◊ï◊®◊™", emoji: "üíº" }, { name: "◊û◊™◊†◊ï◊™", emoji: "üéâ" }, { name: "◊î◊ó◊ñ◊®◊ô ◊û◊°", emoji: "üßæ" }, { name: "◊ê◊ó◊®", emoji: "‚ûï" }
];

// --- DOM refs (◊ú◊§◊ô ◊î-IDs ◊©◊†◊™◊™/◊î◊ï◊°◊§◊™ ◊ë-HTML) ---
const els = {
  // ◊§◊™◊ô◊ó◊î/◊°◊í◊ô◊®◊î
  addIncomeBtn:  document.getElementById("addIncomeBtn"),
  addExpenseBtn: document.getElementById("addExpenseBtn"),
  addDialog:     document.getElementById("addDialog"),
  addTitle:      document.getElementById("addTitle"),
  closeAddBtn:   document.getElementById("closeAddBtn"),

  // ◊ò◊ê◊ë◊ô◊ù
  tabExpense:    document.getElementById("tabExpense"),
  tabIncome:     document.getElementById("tabIncome"),

  // ◊ë◊ï◊®◊® ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™
  categoryPicker:document.getElementById("categoryPicker"),
  categoryGrid:  document.getElementById("categoryGrid"),

  // ◊ò◊ï◊§◊°
  txForm:        document.getElementById("txForm"),
  txKind:        document.getElementById("txKind"),       // 'expense' | 'income'
  txCategoryId:  document.getElementById("txCategoryId"),  // UUID ◊©◊ú ◊ß◊ò◊í◊ï◊®◊ô◊î
  txAmount:      document.getElementById("txAmount"),
  txDate:        document.getElementById("txDate"),
  txNote:        document.getElementById("txNote"),
  txErr:         document.getElementById("txErr"),

  // ◊û◊¶◊ë◊ô ◊î◊ï◊¶◊ê◊î
  expenseModeBlock: document.getElementById("expenseModeBlock"),
  installmentsBlock:document.getElementById("installmentsBlock"),
  txMonths:      document.getElementById("txMonths"),
};

// --- ◊¢◊ñ◊®◊ô UI/◊ñ◊û◊ü ---
function showModal(show){ els.addDialog.classList.toggle("hidden", !show); }
function todayISO(){ const d=new Date(); return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')}`; }
function clearActiveTiles(){ [...els.categoryGrid.querySelectorAll('.cat-tile')].forEach(n=>n.classList.remove('cat-tile--active')); }

function setTab(kind){ // 'expense' | 'income'
  els.txKind.value = kind;
  els.addTitle.textContent = kind === 'expense' ? '◊î◊ï◊°◊§◊™ ◊î◊ï◊¶◊ê◊î' : '◊î◊ï◊°◊§◊™ ◊î◊õ◊†◊°◊î';
  els.tabExpense?.classList.toggle('active', kind==='expense');
  els.tabIncome ?.classList.toggle('active', kind==='income');

  // ◊î◊¶◊í/◊î◊°◊™◊® ◊ë◊ï◊®◊® ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊ï◊û◊¶◊ë ◊î◊ï◊¶◊ê◊î
  els.categoryPicker?.classList.toggle('hidden', kind==='income');
  els.expenseModeBlock?.classList.toggle('hidden', kind==='income');
  if (kind==='income') els.installmentsBlock?.classList.add('hidden');
}

async function ensureAuth(sb){
  const { data:{ session } } = await sb.auth.getSession();
  if (!session?.user) throw new Error('◊ú◊ê ◊û◊ó◊ï◊ë◊®');
  return session.user;
}

// ◊ô◊ï◊¶◊® ◊ú◊û◊©◊™◊û◊© ◊ê◊™ ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊ë◊®◊ô◊®◊™÷æ◊î◊û◊ó◊ì◊ú ◊ê◊ù ◊ó◊°◊®◊ï◊™ (◊§◊¢◊ù ◊ê◊ó◊™)
async function ensureDefaultCategories(sb){
  const user = await ensureAuth(sb);
  const { data: rows, error } = await sb.from('categories').select('name,kind');
  if (error) throw error;
  const have = new Set((rows||[]).map(r => `${r.kind}:${r.name}`));

  const toInsert = [];
  DEFAULT_EXPENSE_CATS.forEach(c => { if (!have.has(`expense:${c.name}`)) toInsert.push({ user_id:user.id, name:c.name, kind:'expense', icon:c.emoji }); });
  DEFAULT_INCOME_CATS.forEach(c  => { if (!have.has(`income:${c.name}`))  toInsert.push({ user_id:user.id, name:c.name, kind:'income',  icon:c.emoji }); });

  if (toInsert.length){
    const { error: insErr } = await sb.from('categories').upsert(toInsert, { onConflict: 'user_id,name,kind' });
    if (insErr) throw insErr;
  }
}

// ◊ë◊ï◊†◊î ◊í◊®◊ô◊ì ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ (◊î◊ï◊¶◊ê◊î) ◊û◊î-DB
async function buildCategoryGrid(sb){
  const { data, error } = await sb.from('categories').select('id,name,kind,icon').eq('kind','expense').order('name');
  if (error) throw error;
  els.categoryGrid.innerHTML = '';
  (data||[]).forEach(row => {
    const tile = document.createElement('button');
    tile.type = 'button';
    tile.className = 'cat-tile';
    tile.dataset.id = row.id;
    tile.innerHTML = `<div class="cat-emoji">${row.icon || 'üè∑Ô∏è'}</div><div class="cat-name">${row.name}</div>`;
    tile.addEventListener('click', () => {
      clearActiveTiles();
      tile.classList.add('cat-tile--active');
      els.txCategoryId.value = row.id;
    });
    els.categoryGrid.appendChild(tile);
  });
}

// ◊§◊™◊ô◊ó◊î ‚Äì ◊î◊ï◊¶◊ê◊î
async function openExpense(sb){
  await ensureDefaultCategories(sb);
  await buildCategoryGrid(sb);
  setTab('expense');
  els.txErr.textContent = '';
  els.txAmount.value = '';
  els.txDate.value = todayISO();
  els.txNote.value = '';
  els.txCategoryId.value = '';
  clearActiveTiles();
  // ◊î◊ß◊ú◊ì◊î ◊ô◊ì◊†◊ô◊™ ◊ë◊™◊ê◊®◊ô◊ö ‚Äì off; ◊ô◊¢◊ì◊ô◊£ ◊ë◊ï◊®◊®
  els.txDate.setAttribute('inputmode','none');
  els.txDate.addEventListener('keydown', ev => ev.preventDefault(), { once:true });
  showModal(true);
}

// ◊§◊™◊ô◊ó◊î ‚Äì ◊î◊õ◊†◊°◊î
async function openIncome(sb){
  await ensureDefaultCategories(sb);
  setTab('income');
  els.txErr.textContent = '';
  els.txAmount.value = '';
  els.txDate.value = todayISO();
  els.txNote.value = '';
  els.txCategoryId.value = ''; // ◊ú◊ê ◊†◊ì◊®◊© ◊ú◊î◊õ◊†◊°◊î
  els.txDate.setAttribute('inputmode','none');
  els.txDate.addEventListener('keydown', ev => ev.preventDefault(), { once:true });
  showModal(true);
}

// ◊©◊ú◊ô◊ò◊î ◊ë◊û◊¶◊ë◊ô ◊î◊ï◊¶◊ê◊î (segmented)
document.querySelectorAll('.seg__btn[data-mode]').forEach(btn=>{
  btn.addEventListener('click', ()=>{
    document.querySelectorAll('.seg__btn').forEach(b=>b.classList.remove('seg__btn--active'));
    btn.classList.add('seg__btn--active');
    const mode = btn.dataset.mode;
    els.installmentsBlock?.classList.toggle('hidden', mode!=='installments');
    els.txForm.dataset.mode = mode;
  });
});

// ◊°◊í◊ô◊®◊™ ◊û◊ï◊ì◊ê◊ú
els.closeAddBtn?.addEventListener('click', ()=>showModal(false));
els.addDialog?.addEventListener('click', (e)=>{ if (e.target.classList.contains('modal__backdrop')) showModal(false); });

// ◊§◊™◊ô◊ó◊™ ◊î◊û◊ï◊ì◊ê◊ú ◊û◊î◊õ◊§◊™◊ï◊®◊ô◊ù ◊ë◊û◊°◊ö ◊î◊®◊ê◊©◊ô
(async () => {
  const sb = await waitForSb();
  els.addExpenseBtn?.addEventListener('click', ()=>openExpense(sb));
  els.addIncomeBtn ?.addEventListener('click', ()=>openIncome(sb));
})();

// ◊©◊û◊ô◊®◊î
els.txForm?.addEventListener('submit', async (e)=>{
  e.preventDefault();
  els.txErr.textContent = '';
  const sb = await waitForSb();
  try{
    const user = await ensureAuth(sb);
    const kind = els.txKind.value; // 'expense' | 'income'
    const amount = parseFloat(els.txAmount.value || '0');
    if (!amount || amount <= 0) throw new Error('◊†◊ê ◊ú◊î◊ñ◊ô◊ü ◊°◊õ◊ï◊ù ◊ó◊ï◊ß◊ô');
    const amount_cents = Math.round(amount * 100);
    const occurred_at = els.txDate.value || todayISO();
    const note = els.txNote.value || '';

    if (kind === 'income') {
      const { error } = await sb.from('transactions').insert({
        user_id: user.id, kind: 'income', category_id: null,
        amount_cents, occurred_at, note
      });
      if (error) throw error;
    } else {
      const category_id = els.txCategoryId.value;
      if (!category_id) throw new Error('◊ë◊ó◊®/◊ô ◊ß◊ò◊í◊ï◊®◊ô◊î ◊ú◊î◊ï◊¶◊ê◊î');

      const mode = els.txForm.dataset.mode || 'one_time';
      if (mode === 'installments') {
        const months = parseInt(els.txMonths.value || '0', 10);
        if (!months || months < 1) throw new Error('◊û◊°◊§◊® ◊™◊©◊ú◊ï◊û◊ô◊ù ◊ó◊ô◊ô◊ë ◊ú◊î◊ô◊ï◊™ 1 ◊ï◊û◊¢◊ú◊î');
        // RPC ◊û◊î◊°◊õ◊ô◊û◊î: add_installments(category_id, total_amount_cents, start_date, months, note)
        const { error } = await sb.rpc('add_installments', {
          p_category_id: category_id,
          p_total_amount_cents: amount_cents,
          p_start_date: occurred_at,
          p_months: months,
          p_note: note
        });
        if (error) throw error;
      } else {
        const { error } = await sb.from('transactions').insert({
          user_id: user.id, kind: 'expense', category_id,
          amount_cents, occurred_at, note, expense_mode: 'one_time'
        });
        if (error) throw error;
      }
    }

    showModal(false);
    // ◊®◊¢◊†◊ï◊ü KPI ◊ë◊û◊°◊ö ◊î◊®◊ê◊©◊ô
    window.dispatchEvent(new Event('tx-changed'));
  }catch(err){
    console.error(err);
    els.txErr.textContent = err?.message || String(err);
  }
});
